Index: src/main/java/edu/sjsu/cs151/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.sjsu.cs151;\n\nimport edu.sjsu.cs151.databaseDisplayControls.SelectionDisplay;\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.stage.Stage;\nimport org.json.simple.parser.ParseException;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\n\npublic class App extends Application {\n\n    // initial launch\n    @Override\n    public void start(Stage stage) throws IOException {\n        homeScreen(stage);\n    }\n\n    // home screen set up\n    public static Controller homeScreen(Stage stage) throws IOException {\n        FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"welcome.fxml\"));\n        Scene scene = new Scene(fxmlLoader.load(), 520, 440);\n\n        Controller controller = fxmlLoader.getController();\n        controller.setPrimaryStage(stage);\n\n        stage.setTitle(\"Michelin Star Restaurant Search - LA  \\\\(^w^)/\");\n        stage.setScene(scene);\n        stage.show();\n\n        return controller;\n    }\n\n    // home screen set up, with remembered selection\n    public static void homeScreenRememberSelection(Stage stage, SelectionDisplay selectionDisplay, String category, String selection) throws IOException{\n        Controller controller = homeScreen(stage);\n\n        controller.setSelectionDisplay(selectionDisplay);\n        controller.updateListView(category, selection);\n    }\n\n    public static void main(String[] args) throws SQLException, IOException, ParseException {\n        JDBC jdbc = new JDBC();\n        jdbc.createDatabase();\n        launch();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/sjsu/cs151/App.java b/src/main/java/edu/sjsu/cs151/App.java
--- a/src/main/java/edu/sjsu/cs151/App.java	(revision 3c8c3f9f07bd03ef85b5b591a4bb1e8411e68e20)
+++ b/src/main/java/edu/sjsu/cs151/App.java	(date 1701257977322)
@@ -45,6 +45,8 @@
     public static void main(String[] args) throws SQLException, IOException, ParseException {
         JDBC jdbc = new JDBC();
         jdbc.createDatabase();
+        jdbc.jsonToDatabase();
         launch();
+        jdbc.disconnect();
     }
 }
\ No newline at end of file
Index: src/main/java/edu/sjsu/cs151/databaseDisplayControls/DetailsDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.sjsu.cs151.databaseDisplayControls;\n\nimport edu.sjsu.cs151.JDBC;\nimport javafx.collections.ObservableList;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class DetailsDisplay implements SelectionDisplay{\n    @Override\n    public String displaySelection(ObservableList<String> items) throws SQLException {\n        // TODO: get the options from database and add it to the ObservableList\n        // Display the appropriate details\n        // may need to make this an interface, and then create each detail display for cuisine, location, price?\n\n\n//        System.out.println(\"---------------------------\");\n//        for(String s : items){\n//            System.out.println(s);\n//        }\n//        System.out.println(\"---------------------------\");\n\n        // String original options:\n        // \"location\"\n        // \"cuisine\"\n        // \"cost\"\n        String columnName = items.get(0);\n        String columnID = columnName.toUpperCase() + \"_ID\";\n        String table = columnName + \"s\";\n        String selection = items.get(1);\n\n        items.setAll(); //reset\n\n        //create a statement\n        Statement statement = JDBC.conn.createStatement();\n\n        //get the cuisines from cuisine list\n        ResultSet rs = statement.executeQuery(\"SELECT \" + columnID + \" FROM \" + table + \" WHERE \" + columnName + \"='\" + selection + \"'\");\n\n        //get the appropriate ID\n        int id = 0;\n        if (rs.next()) {\n            id = rs.getInt(columnID);\n        }\n\n        //get all restaurants with the appropriate id, add to ObservableList\n        rs = statement.executeQuery(\"SELECT name FROM ladatabase WHERE \" + columnID + \"=\" + id);\n        while (rs.next()) {\n            items.add(rs.getString(\"name\"));\n        }\n\n        return \"\";\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/sjsu/cs151/databaseDisplayControls/DetailsDisplay.java b/src/main/java/edu/sjsu/cs151/databaseDisplayControls/DetailsDisplay.java
--- a/src/main/java/edu/sjsu/cs151/databaseDisplayControls/DetailsDisplay.java	(revision 3c8c3f9f07bd03ef85b5b591a4bb1e8411e68e20)
+++ b/src/main/java/edu/sjsu/cs151/databaseDisplayControls/DetailsDisplay.java	(date 1701258423337)
@@ -35,6 +35,7 @@
         //create a statement
         Statement statement = JDBC.conn.createStatement();
 
+
         //get the cuisines from cuisine list
         ResultSet rs = statement.executeQuery("SELECT " + columnID + " FROM " + table + " WHERE " + columnName + "='" + selection + "'");
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"31e7b0d4-5bcb-4602-a3ab-bfbb2608b503\" name=\"Changes\" comment=\"Working database\">\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/JDBC.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/JDBC.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/Restaurant.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/App.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/App.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/Controller.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/DetailsController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/DetailsController.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/CuisineDisplay.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/CuisineDisplay.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/DetailsDisplay.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/DetailsDisplay.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/LocationDisplay.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/LocationDisplay.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/PriceDisplay.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/PriceDisplay.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/SelectionDisplay.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/SelectionDisplay.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/edu/sjsu/cs151/welcome.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/edu/sjsu/cs151/welcome.fxml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/edu/sjsu/cs151/welcome.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/edu/sjsu/cs151/welcome.fxml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Interface\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;customColor&quot;: &quot;&quot;,\n  &quot;associatedIndex&quot;: 0\n}</component>\n  <component name=\"ProjectId\" id=\"2YITkQdHfxh3JYLKdMQbaS1pmjS\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"irene\",\n    \"last_opened_file_path\": \"C:/Users/SJ/Downloads/mysql-connector-j-8.2.0/mysql-connector-j-8.2.0/mysql-connector-j-8.2.0.jar\",\n\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"project.structure.last.edited\": \"Problems\",\n    \"project.structure.proportion\": \"0.15\",\n    \"project.structure.side.proportion\": \"0.1150748\",\n    \"settings.editor.selected.configurable\": \"reference.projectsettings.compiler.javacompiler\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\Irene Chen\\OneDrive - sjsu.edu\\CS151\\CS151-MichelinGuideLA\\src\\main\\resources\\edu\\sjsu\\cs151\" />\n      <recent name=\"C:\\Users\\Irene Chen\\OneDrive - sjsu.edu\\CS151\\CS151-MichelinGuideLA\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\SJ\\OneDrive - sjsu.edu\\CS151\\CS151-MichelinGuideLA\\diagrams\" />\n      <recent name=\"C:\\Users\\Irene Chen\\OneDrive - sjsu.edu\\CS151\\CS151-MichelinGuideLA\\src\\main\\java\\edu.sjsu.cs151.appControls\" />\n    </key>\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\n      <recent name=\"edu.sjsu.cs151\" />\n      <recent name=\"edu.sjsu.cs151.databaseDisplayControls\" />\n      <recent name=\"edu.sjsu.cs151.appControls\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"App\" type=\"Application\" factoryName=\"Application\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"edu.sjsu.cs151.App\" />\n      <module name=\"CS151-MichelinGuideLA\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"31e7b0d4-5bcb-4602-a3ab-bfbb2608b503\" name=\"Changes\" comment=\"\" />\n      <created>1700212245327</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1700212245327</updated>\n      <workItem from=\"1700212266649\" duration=\"390000\" />\n      <workItem from=\"1700216015011\" duration=\"114000\" />\n      <workItem from=\"1700216312573\" duration=\"857000\" />\n      <workItem from=\"1700217230666\" duration=\"8000\" />\n      <workItem from=\"1700246733924\" duration=\"638000\" />\n      <workItem from=\"1700344615125\" duration=\"10008000\" />\n      <workItem from=\"1700512646284\" duration=\"472000\" />\n      <workItem from=\"1700635347177\" duration=\"4423000\" />\n      <workItem from=\"1700879218777\" duration=\"91000\" />\n      <workItem from=\"1701073852331\" duration=\"4256000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Added sequence, state, and use case diagrams. Need to update links after push\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700345132873</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700345132873</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"updated diagram README.md links\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700346011251</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700346011251</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Updated GUI for home screen and details screen: &#10;Allows search in each respective category by clicking location, cuisine, price buttons. On click, list of options is displayed below in scroll list. &#10;Allows selection from scroll list, which then displays the details on new screen. (currently empty details)&#10;(GUI does not use actual data from database yet.)\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700358200282</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700358200282</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"cleaned up code (hopefully more SOLID :) ) and tested a little more for ObservableLists\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700639677658</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700639677658</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Working database\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1701240798167</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1701240798167</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"6\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Added sequence, state, and use case diagrams. Need to update links after push\" />\n    <MESSAGE value=\"updated diagram README.md links\" />\n    <MESSAGE value=\"Updated GUI for home screen and details screen: &#10;Allows search in each respective category by clicking location, cuisine, price buttons. On click, list of options is displayed below in scroll list. &#10;Allows selection from scroll list, which then displays the details on new screen. (currently empty details)&#10;(GUI does not use actual data from database yet.)\" />\n    <MESSAGE value=\"cleaned up code (hopefully more SOLID :) ) and tested a little more for ObservableLists\" />\n    <MESSAGE value=\"Working database\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Working database\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.sql.SQLException\" package=\"java.sql\" />\n          <option name=\"timeStamp\" value=\"1\" />\n        </breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3c8c3f9f07bd03ef85b5b591a4bb1e8411e68e20)
+++ b/.idea/workspace.xml	(date 1701258461718)
@@ -5,19 +5,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="31e7b0d4-5bcb-4602-a3ab-bfbb2608b503" name="Changes" comment="Working database">
-      <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/JDBC.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/JDBC.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/Restaurant.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/App.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/App.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/Controller.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/DetailsController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/DetailsController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/CuisineDisplay.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/CuisineDisplay.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/JDBC.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/JDBC.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/DetailsDisplay.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/DetailsDisplay.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/LocationDisplay.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/LocationDisplay.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/PriceDisplay.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/PriceDisplay.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/SelectionDisplay.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/edu/sjsu/cs151/databaseDisplayControls/SelectionDisplay.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/edu/sjsu/cs151/welcome.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/edu/sjsu/cs151/welcome.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/edu/sjsu/cs151/welcome.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/edu/sjsu/cs151/welcome.fxml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -52,35 +44,32 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "irene",
-    "last_opened_file_path": "C:/Users/SJ/Downloads/mysql-connector-j-8.2.0/mysql-connector-j-8.2.0/mysql-connector-j-8.2.0.jar",
-
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "project.structure.last.edited": "Problems",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.1150748",
-    "settings.editor.selected.configurable": "reference.projectsettings.compiler.javacompiler",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;anniebluu&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Irene Chen/OneDrive - sjsu.edu/CS151/cs151-assignment4&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Problems&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;reference.projectsettings.compiler.javacompiler&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\Irene Chen\OneDrive - sjsu.edu\CS151\CS151-MichelinGuideLA\src\main\resources\edu\sjsu\cs151" />
       <recent name="C:\Users\Irene Chen\OneDrive - sjsu.edu\CS151\CS151-MichelinGuideLA" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
-      <recent name="C:\Users\SJ\OneDrive - sjsu.edu\CS151\CS151-MichelinGuideLA\diagrams" />
       <recent name="C:\Users\Irene Chen\OneDrive - sjsu.edu\CS151\CS151-MichelinGuideLA\src\main\java\edu.sjsu.cs151.appControls" />
     </key>
     <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
@@ -116,6 +105,7 @@
       <workItem from="1700635347177" duration="4423000" />
       <workItem from="1700879218777" duration="91000" />
       <workItem from="1701073852331" duration="4256000" />
+      <workItem from="1701192574090" duration="21665000" />
     </task>
     <task id="LOCAL-00001" summary="Added sequence, state, and use case diagrams. Need to update links after push">
       <option name="closed" value="true" />
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"21\" project-jdk-type=\"JavaSDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 3c8c3f9f07bd03ef85b5b591a4bb1e8411e68e20)
+++ b/.idea/misc.xml	(date 1701254873880)
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="MavenProjectsManager">
@@ -7,5 +8,5 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="21" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="21" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: src/main/java/edu/sjsu/cs151/JDBC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.sjsu.cs151;\n\nimport java.sql.*;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class JDBC {\n \n    public static Connection conn = null;\n\n    public void makeConnection() throws SQLException {\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\"); // Register JDBC driver\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        // Open a connection \n        conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\", \"root\", \"password\");\n    }\n    \n    public void createDatabase() throws SQLException, IOException, ParseException {\n        JSONParser parser = new JSONParser();\n\n        makeConnection();\n\n\n\n        // Execute a query\n        Statement statement = conn.createStatement();\n        statement.executeUpdate(\"DROP SCHEMA IF EXISTS student\");\n        statement.executeUpdate(\"CREATE SCHEMA student\");\n        statement.executeUpdate(\"USE student\");\n        //statement.executeUpdate()\n\n        String createLocationTable = \"create table LOCATIONS \"\n                + \"(LOCATION_ID int NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT, \"\n                + \"location varchar(255) UNIQUE\"\n                + \")\";\n\n        statement.executeUpdate(\"DROP TABLE IF EXISTS LOCATIONS\");\n        statement.executeUpdate(createLocationTable);\n\n        String createCostTable = \"create table COSTS \"\n                + \"(COST_ID int NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT, \"\n                + \"cost varchar(255) UNIQUE\"\n                + \")\";\n\n        statement.executeUpdate(\"DROP TABLE IF EXISTS COSTS\");\n        statement.executeUpdate(createCostTable);\n\n        String createCuisineTable = \"create table CUISINES \"\n                + \"(CUISINE_ID int NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT, \"\n                + \"cuisine varchar(255) UNIQUE\"\n                + \")\";\n\n        statement.executeUpdate(\"DROP TABLE IF EXISTS CUISINES\");\n        statement.executeUpdate(createCuisineTable);\n\n        String createLADatabase = \"CREATE TABLE LADATABASE \"\n                + \"(RESTAURANT_ID int NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT, \"\n                + \"name varchar(255), \"\n                + \"url varchar(255), \"\n                + \"LOCATION_ID int, \"\n                + \"COST_ID int, \"\n                + \"CUISINE_ID int, \"\n                + \"address varchar(255), \"\n                + \"FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS (LOCATION_ID), \"\n                + \"FOREIGN KEY (COST_ID) REFERENCES COSTS (COST_ID), \"\n                + \"FOREIGN KEY (CUISINE_ID) REFERENCES CUISINES (CUISINE_ID)\"\n                + \")\";\n//        statement.executeUpdate(\"USE student\");\n\n        statement.executeUpdate(\"DROP TABLE IF EXISTS LADATABASE\");\n        statement.executeUpdate(createLADatabase);\n\n        Object obj = parser.parse(new FileReader(\"LosAngelesData.json\"));\n\n        JSONArray jsonArray = (JSONArray) obj;\n\n        for (Object jsonElement : jsonArray) {\n            JSONObject jsonObject = (JSONObject) jsonElement;\n\n            PreparedStatement locationStatement = conn.prepareStatement(\"insert IGNORE into LOCATIONS(location) values (?)\");\n\n            PreparedStatement costStatement = conn.prepareStatement(\"insert IGNORE into COSTS (cost) values (?)\");\n            PreparedStatement cuisineStatement = conn.prepareStatement(\"insert IGNORE into CUISINES (cuisine) values (?)\");\n            PreparedStatement databaseStatement = conn.prepareStatement(\"insert into LADATABASE (name, url, LOCATION_ID, COST_ID, CUISINE_ID, address) values (?, ?, ?, ?, ?, ?)\");\n\n            String name = (String) jsonObject.get(\"name\");\n            // Parameters start with 1\n \n//            System.out.println(name);\n            databaseStatement.setString(1, name);\n\n            String url = (String) jsonObject.get(\"url\");\n//            System.out.println(url);\n            databaseStatement.setString(2, url);\n\n\n            String address = (String) jsonObject.get(\"address\");\n \n//            System.out.println(address);\n            databaseStatement.setString(6, address);\n\n\n            String location = (String) jsonObject.get(\"location\");\n \n//            System.out.println(location);\n            locationStatement.setString(1, location);\n            locationStatement.execute();\n\n            String cost = Long.toString((long) jsonObject.get(\"cost\"));\n \n//            System.out.println(cost);\n            costStatement.setString(1, cost);\n            costStatement.execute();\n\n            String cuisine = (String) jsonObject.get(\"cuisine\");\n \n//            System.out.println(cuisine);\n            cuisineStatement.setString(1, cuisine);\n            cuisineStatement.execute();\n\n\n            ResultSet rs = statement.executeQuery(\"SELECT LOCATION_ID FROM LOCATIONS WHERE location=\" + \"'\" + location + \"'\");\n            if (rs.next()) {\n                int locationID = rs.getInt(\"LOCATION_ID\");\n \n//                System.out.println(\"Location ID:\" + locationID);\n                databaseStatement.setInt(3, locationID);\n            }\n\n\n            rs = statement.executeQuery(\"SELECT COST_ID FROM COSTS WHERE cost=\" + \"'\" + cost + \"'\");\n            if (rs.next()) {\n                int costID = rs.getInt(\"COST_ID\");\n \n//                System.out.println(\"Cost ID:\" + costID);\n                databaseStatement.setInt(4, costID);\n            }\n\n            rs = statement.executeQuery(\"SELECT CUISINE_ID FROM CUISINES WHERE cuisine=\" + \"'\" + cuisine + \"'\");\n            if (rs.next()) {\n                int cuisineID = rs.getInt(\"CUISINE_ID\");\n \n//                System.out.println(\"Cuisine ID:\" + cuisineID);\n                databaseStatement.setInt(5, cuisineID);\n            }\n            databaseStatement.execute();\n\n        }\n        statement.close();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/sjsu/cs151/JDBC.java b/src/main/java/edu/sjsu/cs151/JDBC.java
--- a/src/main/java/edu/sjsu/cs151/JDBC.java	(revision 3c8c3f9f07bd03ef85b5b591a4bb1e8411e68e20)
+++ b/src/main/java/edu/sjsu/cs151/JDBC.java	(date 1701258461551)
@@ -9,58 +9,100 @@
 import java.io.IOException;
 
 public class JDBC {
- 
+
+    // instance variables
+    private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/";
+    private static final String USER = "root";
+    private static final String PASSWORD = "password";
     public static Connection conn = null;
+    private Statement statement = null;
+    private PreparedStatement prepareStatement = null;
+    private ResultSet rs = null;
+
+    // default constructor
+    JDBC(){}
+
+    // getters
+    public Connection getConn() {
+        return conn;
+    }
+
+    public Statement getStatement() {
+        return statement;
+    }
+
+    public PreparedStatement getPrepareStatement() {
+        return prepareStatement;
+    }
+
+    public ResultSet getRs() {
+        return rs;
+    }
+
+    // setters
+    public void setConn(Connection conn) {
+        this.conn = conn;
+    }
+
+    public void setStatement(Statement statement) {
+        this.statement = statement;
+    }
 
-    public void makeConnection() throws SQLException {
+    public void setPrepareStatement(PreparedStatement prepareStatement) {
+        this.prepareStatement = prepareStatement;
+    }
 
+    public void setRs(ResultSet rs) {
+        this.rs = rs;
+    }
+
+    public void connect() throws SQLException {
+        // Method connects to database
+        // Register JDBC driver
         try {
-            Class.forName("com.mysql.cj.jdbc.Driver"); // Register JDBC driver
+            Class.forName("com.mysql.cj.jdbc.Driver");
         } catch (ClassNotFoundException e) {
             e.printStackTrace();
         }
 
-        // Open a connection 
-        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "password");
+        // Open a connection
+        conn = DriverManager.getConnection(DATABASE_URL, USER, PASSWORD);
     }
-    
+
     public void createDatabase() throws SQLException, IOException, ParseException {
-        JSONParser parser = new JSONParser();
-
-        makeConnection();
-
-
+        // Method creates databases and tables
+        connect();
 
         // Execute a query
-        Statement statement = conn.createStatement();
-        statement.executeUpdate("DROP SCHEMA IF EXISTS student");
-        statement.executeUpdate("CREATE SCHEMA student");
-        statement.executeUpdate("USE student");
-        //statement.executeUpdate()
+//        Statement statement = conn.createStatement();
+        this.statement = conn.createStatement();
+        this.statement.executeUpdate("DROP SCHEMA IF EXISTS student");
+        this.statement.executeUpdate("CREATE SCHEMA student");
+        this.statement.executeUpdate("USE student");
 
         String createLocationTable = "create table LOCATIONS "
                 + "(LOCATION_ID int NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT, "
                 + "location varchar(255) UNIQUE"
                 + ")";
 
-        statement.executeUpdate("DROP TABLE IF EXISTS LOCATIONS");
-        statement.executeUpdate(createLocationTable);
+        this.statement.executeUpdate("DROP TABLE IF EXISTS LOCATIONS");
+        this.statement.executeUpdate(createLocationTable);
 
         String createCostTable = "create table COSTS "
                 + "(COST_ID int NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT, "
                 + "cost varchar(255) UNIQUE"
                 + ")";
 
-        statement.executeUpdate("DROP TABLE IF EXISTS COSTS");
-        statement.executeUpdate(createCostTable);
+        this.statement.executeUpdate("DROP TABLE IF EXISTS COSTS");
+        this.statement.executeUpdate(createCostTable);
 
         String createCuisineTable = "create table CUISINES "
                 + "(CUISINE_ID int NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT, "
                 + "cuisine varchar(255) UNIQUE"
                 + ")";
 
-        statement.executeUpdate("DROP TABLE IF EXISTS CUISINES");
-        statement.executeUpdate(createCuisineTable);
+        this.statement.executeUpdate("DROP TABLE IF EXISTS CUISINES");
+        this.statement.executeUpdate(createCuisineTable);
 
         String createLADatabase = "CREATE TABLE LADATABASE "
                 + "(RESTAURANT_ID int NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT, "
@@ -74,87 +116,82 @@
                 + "FOREIGN KEY (COST_ID) REFERENCES COSTS (COST_ID), "
                 + "FOREIGN KEY (CUISINE_ID) REFERENCES CUISINES (CUISINE_ID)"
                 + ")";
-//        statement.executeUpdate("USE student");
 
-        statement.executeUpdate("DROP TABLE IF EXISTS LADATABASE");
-        statement.executeUpdate(createLADatabase);
+        this.statement.executeUpdate("DROP TABLE IF EXISTS LADATABASE");
+        this.statement.executeUpdate(createLADatabase);
+    }
+
+    public void jsonToDatabase() throws IOException, SQLException, ParseException {
+        // Create method to parse JSON file into database
+        JSONParser parser = new JSONParser();
 
         Object obj = parser.parse(new FileReader("LosAngelesData.json"));
 
+        // Casts obj to JSONArray
         JSONArray jsonArray = (JSONArray) obj;
 
+//        ResultSet rs = null;
+
+        // Iterates jsonArray to insert data into database
         for (Object jsonElement : jsonArray) {
             JSONObject jsonObject = (JSONObject) jsonElement;
 
-            PreparedStatement locationStatement = conn.prepareStatement("insert IGNORE into LOCATIONS(location) values (?)");
-
-            PreparedStatement costStatement = conn.prepareStatement("insert IGNORE into COSTS (cost) values (?)");
-            PreparedStatement cuisineStatement = conn.prepareStatement("insert IGNORE into CUISINES (cuisine) values (?)");
-            PreparedStatement databaseStatement = conn.prepareStatement("insert into LADATABASE (name, url, LOCATION_ID, COST_ID, CUISINE_ID, address) values (?, ?, ?, ?, ?, ?)");
-
-            String name = (String) jsonObject.get("name");
-            // Parameters start with 1
- 
-//            System.out.println(name);
-            databaseStatement.setString(1, name);
-
-            String url = (String) jsonObject.get("url");
-//            System.out.println(url);
-            databaseStatement.setString(2, url);
-
-
-            String address = (String) jsonObject.get("address");
- 
-//            System.out.println(address);
-            databaseStatement.setString(6, address);
-
+            // Inserts locations into locations table
+            //PreparedStatement locationStatement = conn.prepareStatement("insert IGNORE into LOCATIONS(location) values (?)");
+            this.prepareStatement = conn.prepareStatement("insert IGNORE into LOCATIONS(location) values (?)");
 
             String location = (String) jsonObject.get("location");
- 
-//            System.out.println(location);
-            locationStatement.setString(1, location);
-            locationStatement.execute();
+            this.prepareStatement.setString(1, location);
+            this.prepareStatement.execute();
 
+            // Inserts costs into costs table
+            this.prepareStatement = conn.prepareStatement("insert IGNORE into COSTS (cost) values (?)");
             String cost = Long.toString((long) jsonObject.get("cost"));
- 
-//            System.out.println(cost);
-            costStatement.setString(1, cost);
-            costStatement.execute();
+            this.prepareStatement.setString(1, cost);
+            this.prepareStatement.execute();
 
+            // Inserts cuisines into cuisines table
+            this.prepareStatement = conn.prepareStatement("insert IGNORE into CUISINES (cuisine) values (?)");
             String cuisine = (String) jsonObject.get("cuisine");
- 
-//            System.out.println(cuisine);
-            cuisineStatement.setString(1, cuisine);
-            cuisineStatement.execute();
+            this.prepareStatement.setString(1, cuisine);
+            this.prepareStatement.execute();
+
+            // Inserts data into Los Angeles database
+            this.prepareStatement = conn.prepareStatement("insert into LADATABASE "
+                    + "(name, url, LOCATION_ID, COST_ID, CUISINE_ID, address) values (?, ?, ?, ?, ?, ?)");
 
+            String name = (String) jsonObject.get("name");
+            this.prepareStatement.setString(1, name);
 
-            ResultSet rs = statement.executeQuery("SELECT LOCATION_ID FROM LOCATIONS WHERE location=" + "'" + location + "'");
-            if (rs.next()) {
-                int locationID = rs.getInt("LOCATION_ID");
- 
-//                System.out.println("Location ID:" + locationID);
-                databaseStatement.setInt(3, locationID);
+            String url = (String) jsonObject.get("url");
+            this.prepareStatement.setString(2, url);
+
+            this.rs = this.statement.executeQuery("SELECT LOCATION_ID FROM LOCATIONS WHERE location=" + "'" + location + "'");
+            if (this.rs.next()) {
+                int locationID = this.rs.getInt("LOCATION_ID");
+                this.prepareStatement.setInt(3, locationID);
             }
 
+            this.rs = this.statement.executeQuery("SELECT COST_ID FROM COSTS WHERE cost=" + "'" + cost + "'");
+            if (this.rs.next()) {
+                int costID = this.rs.getInt("COST_ID");
+                this.prepareStatement.setInt(4, costID);
+            }
 
-            rs = statement.executeQuery("SELECT COST_ID FROM COSTS WHERE cost=" + "'" + cost + "'");
-            if (rs.next()) {
-                int costID = rs.getInt("COST_ID");
- 
-//                System.out.println("Cost ID:" + costID);
-                databaseStatement.setInt(4, costID);
+            this.rs = this.statement.executeQuery("SELECT CUISINE_ID FROM CUISINES WHERE cuisine=" + "'" + cuisine + "'");
+            if (this.rs.next()) {
+                int cuisineID = this.rs.getInt("CUISINE_ID");
+                this.prepareStatement.setInt(5, cuisineID);
             }
 
-            rs = statement.executeQuery("SELECT CUISINE_ID FROM CUISINES WHERE cuisine=" + "'" + cuisine + "'");
-            if (rs.next()) {
-                int cuisineID = rs.getInt("CUISINE_ID");
- 
-//                System.out.println("Cuisine ID:" + cuisineID);
-                databaseStatement.setInt(5, cuisineID);
-            }
-            databaseStatement.execute();
-
-        }
-        statement.close();
+            String address = (String) jsonObject.get("address");
+            this.prepareStatement.setString(6, address);
+
+            this.prepareStatement.execute();
+        }
+    }
+    public void disconnect() throws SQLException {
+        this.rs.close();
+        this.statement.close();
     }
 }
\ No newline at end of file
